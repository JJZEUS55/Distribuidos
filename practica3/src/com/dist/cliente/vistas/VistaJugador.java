/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dist.cliente.vistas;

import clienteC.clase_cliente;
import servidorC.clase_server;
import com.dist.cliente.Jugador;
import com.dist.coordinador.Mazo;
import com.dist.sockets.Cliente;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import servidorC.InfoPC;


/**
 *
 * @author geoge
 */
public class VistaJugador extends javax.swing.JFrame implements Runnable {

    //AUN NO DETECTA CUANDO ENTRA OTRO JUGADOR :'v
    //QUE CLIENTE MANDE MENSAJE A SERVIDOR DE QUE YA PUEDE ENTRAR OTRO JUGADOR ESO SERVIRIA
    Mazo cartasJugador;
    Jugador j;
    Cliente cli, cli2, cli3;
    clase_cliente CheckClient; // chequeo constante si esta activo el server
    clase_server conexionBully; // solo se activa si es necesario
    clase_cliente temporal1, temporal2; // se activan al instante de notar la caida del servidor
    boolean activar;
    Thread h1, h2, h3;
    Thread HiloCheck, HiloAccept;
    int numeroJugador;
    int juadorAIniciar;
    boolean ServidorBully = false;
    InfoPC equiposBully[] = new InfoPC[5];
    int contadorBully = 0;

    public VistaJugador() {
        initComponents();
        activar = false;
        j = new Jugador();
        try {
            cli = new Cliente(10000);
            cli2 = new Cliente();
            cli3 = new Cliente(10202);
        } catch (Exception e) {}
        CheckClient = new clase_cliente("localhost", 3080); // cambiar ip segun el caso
        h1 = new Thread(this);
        h2 = new Thread(this);
        h3 = new Thread(this);
        HiloCheck = new Thread(this);
        HiloAccept = new Thread(this);
        
        h1.start();
        HiloCheck.start();
        //h2.start();
        //h3.start();
        jbtnPeticion.setEnabled(false);
    }

    public void clienteEsperaActivarse() {

        cli.startClientActivar();
        activar = cli.getActivar();
        numeroJugador = cli.getClienteNumero();

        if (numeroJugador == 1) {
            jbtnPeticion.setEnabled(true);
        } else {
            h3.start();
        }
        System.out.println("Este Solo se ha activado y es el numero " + numeroJugador);
        jlblNumJugador.setText("Jugador: " + numeroJugador);
    }

    public void clientePedirCartas() {

        System.out.println("Soy el jugador #" + numeroJugador + " y estoy pidiendo");
        cartasJugador = cli2.startClient(numeroJugador);

        activar = cli2.getActivar();
        System.out.println("Activar del jugador es : " + activar);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePokemon = new javax.swing.JTable();
        jbtnPeticion = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jlblNumJugador = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTablePokemon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombre", "Ataque", "Defensa", "HP"
            }
        ));
        jScrollPane1.setViewportView(jTablePokemon);

        jbtnPeticion.setText("Peticion");
        jbtnPeticion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnPeticionActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setText("Cartas Obtenidas");

        jlblNumJugador.setText("Jugador: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(226, 226, 226)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbtnPeticion, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlblNumJugador)
                .addGap(41, 41, 41))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlblNumJugador)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                .addComponent(jbtnPeticion, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnPeticionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnPeticionActionPerformed

        try {
            //clienteEsperaActivarse();            
            h2.start();
            h3 = new Thread(this);
            h3.start();
            //clientePedirCartas();

        } catch (Exception ex) {
            Logger.getLogger(VistaJugador.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jbtnPeticionActionPerformed

    public void mostrarMazo() {
        limpiarTabla();
        for (int i = 0; i < cartasJugador.getCincoCartas().size(); i++) {
            addValoresTablaJugador(i);
        }
        j.setMazoCartas(cartasJugador);
        j.guardarMazoBD();
    }

    public void addValoresTablaJugador(int i) {
        DefaultTableModel modelo = (DefaultTableModel) jTablePokemon.getModel();
        Object[] filas = new Object[4];
        filas[0] = cartasJugador.getCincoCartas().get(i).getNombre();
        filas[1] = cartasJugador.getCincoCartas().get(i).getAtaque();
        filas[2] = cartasJugador.getCincoCartas().get(i).getDefensa();
        filas[3] = cartasJugador.getCincoCartas().get(i).getHp();

        modelo.addRow(filas);
        jTablePokemon.setModel(modelo);
    }

    public void limpiarTabla() {
        DefaultTableModel modelo = (DefaultTableModel) jTablePokemon.getModel();
        modelo.setRowCount(0);
        jTablePokemon.setModel(modelo);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VistaJugador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VistaJugador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VistaJugador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaJugador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VistaJugador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTablePokemon;
    private javax.swing.JButton jbtnPeticion;
    private javax.swing.JLabel jlblNumJugador;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        Thread hiloActual = Thread.currentThread();
        boolean botonAct = false;
        while (h1 == hiloActual) {
            try {
                clienteEsperaActivarse();
                if (activar == true) {
                    System.out.println("Ha acabado el HILO 1");
                    break;
                }
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(VistaJugador.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        boolean stoph2 = false; 
        while (h2 == hiloActual && stoph2 == false) {
            try {
                clientePedirCartas();
                jbtnPeticion.setEnabled(false);
                mostrarMazo();
                stoph2 = true;
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(VistaJugador.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        while (h3 == hiloActual) {
            try {
                if (numeroJugador != 1) {
                    System.out.println("Entrando a cli esperar jugador  ");

                    botonAct = cli3.esperarJugadorAnterior(numeroJugador);
                    if(numeroJugador == 3){
                        //botonAct = cli3.esperarJugadorAnterior(numeroJugador);
                        System.out.println("El valor de boton ACT es " + botonAct);
                    }

                    if (botonAct == true) {
                        System.out.println("POR FIN BOTON ACTIVADO");
                        jbtnPeticion.setEnabled(botonAct);
                        break;
                    }

                }
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(VistaJugador.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        while (HiloCheck == hiloActual)
        {
            if(CheckClient.check() == false){
                h1.stop();
                h2.stop();
                h3.stop();
                System.out.println("Fallo del servidor cerrando conexion");
                System.out.println("Iniciando proceso de bully");
                try {
                    for (int i = 0; i < 3 + numeroJugador; i++) {
                        System.out.println("tratando de conectarse");
                        temporal1 = new clase_cliente("localhost", 4000); // diferentes ip
                        //temporal2 = new clase_cliente("localhost", 4000); // diferentes ip
                        if(temporal1.isStatusCliente() == true){
                            System.out.println("---------Un cliente esta conectado-----------");
                            temporal1.ProcesoSeleccion();
                            break;
                        }
//                        if(temporal2.isStatusCliente() == true){
//                            System.out.println("---------Un cliente esta conectado-----------");
//                            temporal2.ProcesoSeleccion();
//                            break;
//                        }
                        Thread.sleep(numeroJugador *1000);
                    }                                  
                } catch (InterruptedException ex) {
                    Logger.getLogger(VistaJugador.class.getName()).log(Level.SEVERE, null, ex);
                }
                if(temporal1.isStatusCliente() == false)  // || temporal2.isStatusCliente() == false)
                {
                    System.out.println("Iniciando servidor bully");
                    conexionBully = new clase_server(4000);
                    conexionBully.iniciar();
                    ServidorBully = true;
                    HiloAccept.start();
                }
                HiloCheck.stop();                
            }            
        }
        while(HiloAccept == hiloActual)
        {
            equiposBully[contadorBully] = conexionBully.aceptar(contadorBully);
            System.out.println("contador bully" +contadorBully);
            contadorBully++;
            
            if(contadorBully  > 1){
                System.out.println("Iniciando seleccion llamando a funcion");
                conexionBully.ProcesoSeleccion(equiposBully, contadorBully);
                HiloAccept.stop();
            }
        }
        
    }
}
